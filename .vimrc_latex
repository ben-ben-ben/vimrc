

"create a left-right block
function! Leftrightblock()
   "
   normal "tyl
   "
   if @t == '{'
      let s = '\}'
      normal i\
   elseif @t == '('
      let s = ')'
   elseif @t == '['
      let s = ']'
   elseif @t == '|'
      let s = '|'
      "let @t = '.'
      normal r.
   else
      let s = @t
   endif
   "
   " Get column number
   ""let c = col(".")
   "
   normal i\left
   normal A \Big.
   exe "normal o\\right" . s
   ""normal o
   "
   ""for n in range(c-1)
   ""   normal i 
   ""endfor
   "
   ""exe "normal A\\right" . s
   "
   "normal O
   exe "normal O\t"
   "
   ""for n in range(c-1)
   ""   normal i 
   ""endfor
   "
   "normal >>
   "
endfunction


   "execute "normal i \\left\<Esc>ea \\Big. "
   "return
   ""exe "normal o\\right" . s
   ""normal o
   "execute "normal s<Cr>"
   ""
   "for n in range(c-1)
   "   normal i 
   "endfor
   ""
   "exe "normal O\t"
   ""
   "normal o
   ""
   "for n in range(c-1)
   "   normal i 
   "endfor
   ""
   "exe "normal A\\right" . s

" Create an in-line left--right
function! Leftrightline()
   "
   "normal "tyl
   normal "tdl
   "
   if @t == '{'
      let s = '\}'
      normal i\
   elseif @t == '('
      let s = ')'
   elseif @t == '['
      let s = ']'
   elseif @t == '|'
      let s = '|'
      "let @t = '.'
      normal r.
   else
      let s = @t
   endif
   "
   " Get column number
   ""let c = col(".")
   "
   "normal i\left
	"normal Ea \Big. 
	exe "normal i\\left" . @t . " \\Big. "
   exe "normal A \\right" . s
   "
endfunction

"
function! Leftright()
	if col(".") == col("$")-1
		":call Leftrightblock()<CR>
		call Leftrightblock()
	else
		":call Leftrightline()<CR>
		call Leftrightline()
	endif
endfunction

" Create a left-right block
   nnoremap <leader>r :call Leftright()<CR>
   "inoremap <leader>r <esc>:call Leftright()<CR>O
   inoremap <leader>r <esc>:call Leftright()<CR>A


" From: http://vim.wikia.com/wiki/Compiling_LaTeX_from_Vim
   let b:tex_flavor = 'pdflatex'
   compiler tex
   set makeprg=pdflatex\ \-file\-line\-error\ \-interaction=nonstopmode
   set errorformat=%f:%l:\Â %m


" finding the equation number
"nnoremap <leader>E :0,.s/begin{align//n
"
" save last message
"let @a = v:statusmsg

function! BeginEnd()
  execute "normal \"tdiW"
  execute "normal i%\n\\begin\{\<Esc>\"tpA\}\n%\n\\end\{\<Esc>\"tpA\}\n%\<Esc>"
  let fpth = split(@%,'\') | " file path
  let fnam = fpth[-1]      | " filename 
  let vnum = fnam[strridx(fnam,'-')+1:strridx(fnam,'.')-1] | " get the version number of the file
  let t = vnum            | " save version number to register 't'
  if @t[0:4] == 'align'   | " if align or alignat
    execute "normal kO%\\label\{eq:\<Esc>"
    "execute "normal kO\\label\{eq:\<Esc>"
    " Add file-version info to label
    "let fpth = split(@%,'\') | " file path
    "let fnam = fpth[-1]      | " filename 
    "let vnum = fnam[strridx(fnam,'-')+1:strridx(fnam,'.')-1] | " get the version number of the file
    "let @t = vnum            | " save version number to register 't'
    "let t = vnum            | " save version number to register 't'
    execute "normal A" t . "-"  | " add file-version number to equation label
    " Add equation-number information to label
    "0,.s/begin{align\}//n    | " count occurences of 'begin{align'
    "0,.s/begin{align//n    | " count occurences of 'begin{align'
    %s/begin{align//n    | " count occurences of 'begin{align'
    let varmsg = split(v:statusmsg) | " number of occurences of 'begin{align'
    "let @t = varmsg[0]          | " save number of occurences to register 't'
    let s = varmsg[0]          | " save number of occurences to register 's'
    "execute "normal \"tpA\}\<Esc>"
    execute "normal A" s . "\}"
		s/\s//g
    execute "normal O%\<Esc>O"
  elseif @t[0:5] == 'figure'
    execute "normal kO%\\label\{fig:\<Esc>"
    execute "normal A" t . "-"      | " add file-version number to equation label
    "0,.s/begin{figure//n            | " count occurences of 'begin{align'
    %s/begin{figure//n            | " count occurences of 'begin{figure'
    let varmsg = split(v:statusmsg) | " number of occurences of 'begin{figure'
    let s = varmsg[0]               | " save number of occurences to register 's'
    execute "normal A" s . "\}"     | " add the number of occurences to the label
	 s/\s//g                         | " remove the white space
    execute "normal O%\<Esc>"      | " add comment symbols
	 execute "normal O%\\centering"      | " add 'centering'
	 execute "normal o%\\includegraphics[scale=0.6]{}"      | " add 'includegraphics'
	 execute "normal jo%\\caption{}%CAP"
  endif
endfunction

" Create a begin-end block
   "map <leader>a I%<cr>\begin{<esc>A}<esc>"tya}o%<cr>%<cr>%\label{eq:}<cr>\end<esc>"tpo%<esc>3kO
   "inoremap <leader>a <esc>I%<cr>\begin{<esc>A}<esc>"tya}o%<cr>%<cr>%\label{eq:}<cr>\end<esc>"tpo%<esc>3kO
   "nnoremap <leader>l :0,.s/begin{align//n
   nnoremap <leader>a :call BeginEnd()<CR>
   inoremap <leader>a <esc>:call BeginEnd()<CR>i


let dict_latex =
	\{
		\"000" : "What would you like to do?",
		\"c" : "Compile",
		\"p" : "Print",
		\"v" : "View the pdf file",
		\"n" : "Open next version",
		\"l" : "View the log file",
		\"m" : "mail the tex and pdf files"
	\}



" All kinds of useful everyday latex commands
" compile, print, view-pdf, email-files, create-new-file
"http://vim.wikia.com/wiki/Wait_for_user_input_(getchar)_without_moving_cursor
function! LATEX()
   " TODO: <Esc> escapes, echo "Never mind..."
   "silent !clear
   " file-path and file-name info
   "let fpth = split(@%,'\') | " file path
   let fpth = split(@%, '/') | " file path
   let fnam = fpth[-1]       | " filename 
   let vnum = fnam[strridx(fnam,'-')+1:strridx(fnam,'.')-1] | " get the version number of the file
   " Filenames
   let ftex = @%
   "if @# == ""
   "   let ftex = @%
   "   "let fdir = "."
   "else
   "   let ftex = @# . "/" . @%
   "   "let ftex = "~/" . @# . "/" . @%
   "   "let fdir = @# . "/"
   "endif
   "
   " Created pdf file name
   let fpdf = ftex[:-4] . "pdf"
   "
   " Directory of LaTeX document
   let fdir = ""
   "
   if ftex[1] == "/"
      let fdir = "/"
   endif
   "echom "fpth = " . fpth | "DEBUG
   for i_split in fpth[:-2]
      let fdir = fdir . i_split . "/"
      "echom "fdir = " . fdir | "DEBUG
   endfor
   if fdir == ""
      let fdir = "."
   endif
   "
   let t = vnum            | " save version number to register 't'
   " charater prompt
   echom "Do you want to (c) compile, (p) print, (v) view the pdf file, (n) open next version, (l) view the log file, (m) mail the tex and pdf files?"
   let chr = ""
   "if getchar(1)
   "   let chr = getchar()
   "endif
   let chr = getchar()
   echom "You pressed '" . chr . "', which corresponds to " . nr2char(chr)
   "
   if chr==13 | " 13=='<Ent>'
      echom "you pressed '\\\<Ent\>'"
   "
   elseif chr=="\<Backspace>"
      echom "you pressed '\\\<Backspace\>'"
   "
   elseif chr==97 | " 97=='a'
      echo "you pressed 'a'"
   "
   elseif chr==99 | " 99='c'
      " compile LaTex file
      echo "you pressed 'c'"
      "echom "Compiling file " . ftex
      echom "Compiling file " . ftex . " in directory " . fdir
      "let cmd_str = "!pdflatex " . ftex
      " compile LaTeX file in its directory
      "WORKS:
      "let cmd_str = "!pdflatex -output-directory=" . fdir . " " . ftex
      "'silent' execution:
      let cmd_str = "silent !pdflatex -output-directory=" . fdir . " " . ftex
      execute cmd_str
		echo "Compiled " . ftex
   "
   elseif chr==112 | " 112='p'
      echo "you pressed 'p'"
      " echom "Printing file: [filepath]"
      echom "Printing file: " . fpdf
      "
      "
      "let str_sides_main = " -o sides="
         "let str_sides_L = "two-sided-long-edge "
         "let str_sides_S = "two-sided-short-edge "
         "let str_sides_1 = "one-sided "
         let o_str_sides = [ "two-sided-long-edge ", "two-sided-short-edge ", "one-sided "]
      let d_str_sides = o_str_sides[0]
      let s_str_sides = d_str_sides
      "
      let d_num_copies = 1
      let s_num_copies = d_num_copies
      "
      " Printing mode
      let o_str_mode = ["regular", "booklet", "slides", "poster"]
      let d_str_mode = o_str_mode[0]
      let s_str_mode = d_str_mode
      "
      let s_str_prnt  = "4fl"
      " Get default printer
      let @t = system("lpstat -p -d | egrep -o '^system default destination: (\\S+)'")
      let prnt_default = matchstr( @t, '\m\(^system default destination: \)\@<=\(\S*\>\)' )
      echom "default printer destination: " . prnt_default
      " To get list of printers
      " lpstat -p -d | egrep -o '^printer (\w+) '
      let @t = system("lpstat -p -d | egrep -o 'printer (\\S+)'")
      "let a =  split(@t, " ")
      let a =  split(@t, "\n")
      let prnt_dests = []
      for temp in a
         "let b += [ matchstr(temp, '\m\(^printer \)\@<=\(\S*\)' ) ]
         let prnt_dests += [ matchstr( temp, '\m\(^printer \)\@<=\(\S*\>\)' ) ]
      endfor
      "echom "list of printers: "
      "echom prnt_dests
      "let c = 0
      "for i in a
      "   if c
      "      let b += [i]
      "   endif
      "   let c = 1-c
      "endfor
      "echom b
      "
      "
      let bool_wait = 1
      while bool_wait
         " Solicit approval/modifications
         redraw
         echo "Filename: " . fpdf . "\n" . "(s)sides: " . s_str_sides . "\n" . "(c)opies: " . s_num_copies  . "\n". "(p)rinter: " . s_str_prnt  . "\nPress \<Ent\> to print."
         "
         let m_chr = getchar()
         "
         if m_chr==13 | " 13==<Ent>
            " submit
            let bool_wait = 0
            "
         elseif m_chr==99 | " 99=='c'
            " number of copies
            redraw
            "echo "Enter number of copies: "
            " TODO: ensure a positive integer
            let str_temp = Getstr("Enter number of copies:")
				"let str_temp = str_temp[1]
            let s_num_copies = str_temp[1]
            "
         elseif m_chr==115 | " 115=='s'
            "
            " Choose sides
            redraw
            echo "Choose:"
            let str_choice = ""
            let num_choice = 0
            for temp in o_str_sides
               let str_choice .= "(" . num_choice . ") " . temp
               let num_choice += 1
            endfor
            echo str_choice
            "
            " TODO: ensure number between 0 and 2
            let str_temp = Getstr("")
				let num_temp = str2nr(str_temp[1])
            let s_str_sides = o_str_sides[num_temp]
            "
         elseif m_chr==112 | " 113=='p'
            " choose printer
            redraw
            echo "Choose:"
            let str_choice = ""
            let num_choice = 0
            for temp in prnt_dests
               let str_choice .= "(" . num_choice . ") " . temp
               let num_choice += 1
            endfor
            echo str_choice
            "
            " TODO: ensure number between 0 and 2
            let str_temp = Getstr("")
				let num_temp = str2nr(str_temp[1])
            let s_str_prnt =  prnt_dests[num_temp]
            "
         endif
         "
      endwhile
      "
      let o_str_main  = ["!lp -o fit-to-page ", "!python2 ~/help/booklet-04.py "]
      let f_str_main  = "!lp -o fit-to-page "
      "let f_str_sides = " -o sides=" . str_sides . " "
      let f_str_sides = " -o sides=" . s_str_sides . " "
      let f_str_prnt  = " -d " . s_str_prnt . " "
      "let f_str_copy  = " -n " . s_num_copies
      let f_str_copy  = " -n "
      let o_str_pages = ["-o page-ranges=", "-p "]
      "let f_str_pages = "-o page-ranges="
      "
      if s_str_mode == o_str_mode[0]
         " reular printing
         let cmd_str = f_str_main . f_str_sides . f_str_prnt . f_str_copy . f_str_prnt . " " . fpdf
      elseif s_str_mode == o_str_mode[1]
         " booklet printing
         "let cmd_str = "!python2 ~/help/booklet-04.py -p - -n 1 -f unruh-1976.pdf
         let cmd_str = o_str_main[1] . o_str_pages[1] . f_str_pages . o_str_copy . s_num_copies . " -f " . fpdf
      elseif s_str_mode == o_str_mode[2]
         " slides,  slideshow, transparencies, viewgraphs
         "lp -o fit-to-page -o number-up=4 -o number-up-layout="btlr" -o page-border="single-thick" -o sides=two-sided-short-edge filename
         let cmd_str = o_str_main[0] . " -o number-up=4 -o number-up-layout=\"btlr\" -o page-border=\"single-thick\" " . "-o sides=" . o_str_sides[1] . " " . fpdf
      else
         " poster printing
      endif
      let cmd_str = "!lp -o fit-to-page -o sides=two-sided-long-edge " . fpdf
      "!python2 ~/help/booklet-04.py -p - -n 1 -f unruh-1976.pdf
      "!lp -o fit-to-page -o sides=two-sided-long-edge unruh-1976.pdf
      "!lp -o fit-to-page -o sides=one-sided unruh-1976.pdf
      "!lp -d 4fl -o fit-to-page -o sides=one-sided unruh-1976.pdf
      "!lp -d 5fl -o fit-to-page -o sides=one-sided unruh-1976.pdf
      "
      "execute cmd_str
      silent exec cmd_str
      "
      " view printing progress:
      "!watch -d -n 1 lpq -P 4fl"
      "execute "!watch -d lpq"
      execute "!watch -d lpstat"
   "
   elseif chr==118 | " 118='v'
      echo "you pressed 'v'"
      echom "Viewing file " . fpdf . " in directory " . fdir
      "let cmd_str = "!epdfview " . fpdf . " &" 
      "let cmd_str = "!xpdf -rv " . fpdf . " &" 
      "let cmd_str = "!xpdf -rv -mattecolor 000000 " . fpdf . " &" 
      let cmd_str = "!zathura " . fpdf . " &" 
		" For Kindle
		"let cmd_str = '!bash -ic "kzathura ' . fpdf . ' & "'
		"let cmd_str = "zathura -c /home/ljones/.config/zathura_kindle/ --mode fullscreen " . fpdf . " & "

      "execute cmd_str
      silent exec cmd_str
   "
   elseif chr==110 | " 110='n'
      echo "you pressed 'n'"
      "echom "variable 'vnum' is " . vnum
      " next version number
      let next_num = vnum + 1
      if next_num <= 9
         let next_num = "0" . next_num
      endif
      "
      " Next filename:
      let next_ftex = ftex[:-7] . next_num . ".tex"
      "
      " Checking if file exists
      if !empty( glob( next_ftex ))
			" File exists
         echom "File exists"
         "execute "e " . next_ftex
      else
			" File does not exist yet
			"echom "Copying file " . ftex . " to file " . ftex[:-7] . next_num . ".tex"
			echom "Copying file " . ftex . " to file " . next_ftex
			"
			let cmd_str1 = "!cp " . ftex . " " . next_ftex
			"execute cmd_str1
			silent exec cmd_str1
			"
      endif
		"
		" Edit next file (whether new or not)
		let cmd_str = "edit " . next_ftex
		execute cmd_str
		"execute cmd_str1 . " \| " . cmd_str
      "
   "
   elseif chr==108 | "108=='l'
   " view log file
      let flog =  ftex[:-4] . "log"
      "let cmd_str = "vsplit " . flog
      "let cmd_str = "!vim " . flog . " &"
      let cmd_str = "tabe " . flog
      echom cmd_str
      execute cmd_str
   "
   elseif chr==109 | " 109='m'
   " mail the tex and pdf files
      "
      "let str_subject = "attached tex and pdf files"
      let str_subject = ftex[:-5] 
      let str_receipients = "leon"
      "
      let m_bool = 1
      while m_bool
         "silent !clear
         redraw
         echo "(s)ubject:     " . str_subject . "\n" . "(r)eceipients: " .  str_receipients . "\n" . "Press \<Ent\> to send."
         let m_chr = getchar()
         "
         "if m_chr==109 | " 109=='m'
         "   let cmd_str = "!mutt -Ex -s \"" . str_subject . "\" " . str_receipients . " -a " . ftex . " " . fpdf . " --"
         "elseif m_chr==13 | " 13==<Ent>
         if m_chr==13 | " 13==<Ent>
            let m_bool = 0
         elseif m_chr==115 | " 115=='s'
            let str_subject = Getstr("Subject:")
				let str_subject = str_subject[1]
         elseif m_chr==114 | " 114=='r'
            let str_receipients = Getstr("Recipients:")
            let str_receipients = str_receipients[1]
         endif
      "
      endwhile
      "
      let list_files = [ftex, fpdf]
      "
      "let cmd_str = "!mutt -Ex -s \"" . str_subject . "\" " . str_receipients . " -a " . ftex . " " . fpdf . " --"
      "let cmd_str = "!mutt -E -s \"" . str_subject . "\" " . str_receipients . " -a " . ftex . " " . fpdf . " --"
      let cmd_str = "!python /home/ljones/help/emailer-02.py -s \"" . str_subject . "\" " . str_receipients . " -a " . ftex . " " . fpdf . " --"
      "let tmp = Getstr("")
      "echom "string 'tmp' is " . tmp
      echom cmd_str
      "echom fnam
      execute cmd_str
   "
   else
      echo "un-recognized option"
   endif
   "
   " redraw screen after use
   redraw!
   redraw!
   "redraw
   "redraw
   "
endfunction

" LaTeX mappings

" Create a section
   nnoremap <leader>s I%<cr>%<cr>%<cr>\section{<esc>A}<cr>%\label{sec:}<cr>%<cr>%<cr>%<cr><cr><esc>
   inoremap <leader>s <esc>I%<cr>%<cr>%<cr>\section{<esc>A}<cr>%\label{sec:}<cr>%<cr>%<cr>%<cr><cr>

" Create a bold-face line
   nnoremap <leader>b I\noindent%<cr>%<cr>\textbf{<esc>A}<cr>%<cr><esc>
   inoremap <leader>b <esc>I\noindent%<cr>%<cr>\textbf{<esc>A}<cr>%<cr>

" operators relating to $---$ math-blocks
	onoremap i$ :<c-u>normal! T$vt$<cr>
	onoremap a$ :<c-u>normal! F$vf$<cr>
	vnoremap i$  <esc>T$vt$
	vnoremap a$  <esc>F$vf$

" quotations operations
	" have to move 2 steps (2l) since `> location has not changed, but chars have shifted
	vnoremap q v`<i``<esc>`>2la''
	onoremap i' :<c-u>normal! T`vt'<cr>
	onoremap i' :<c-u>normal! F`vf'<cr>

" Use everyday features
   "inoremap <leader>\ <esc>:call LATEX()<CR>
	"inoremap <leader>\ <esc>:call LATEX()<CR>
	nnoremap <leader>l :call LATEX()<CR>
   nnoremap <leader>l :call LATEX()<CR>
